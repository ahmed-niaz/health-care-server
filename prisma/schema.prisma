generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! user Model
//TODO: [one to one relation with user with admin]

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(active)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

enum UserRole {
  super_admin
  admin
  doctor
  patient
}

enum UserStatus {
  active
  blocked
  deleted
}

// ! admin Model 
//TODO: [one to one relation with user with email_FK]

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

// ! doctor model
model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int      @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean  @default(false)
  averageRating       Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // ** one to one relation
  user              User                @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
  doctorSchedules   DoctorSchedules[]

  @@map("doctors")
}

enum Gender {
  male
  female
}

// ! patient Model
model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // ** one to one relation
  user              User               @relation(fields: [email], references: [email]) //3D
  patientHealthData PatientHealthData? // one to one relation 1D
  medicalReport     MedicalReport[] // one to many

  @@map("patients")
}

// ! Specialties model

model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

// ! DoctorSpecialties [intermediate table for many to many]

model DoctorSpecialties {
  specialtiesId String
  doctorId      String

  specialties Specialties @relation(fields: [specialtiesId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  // todo: composite key
  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

// ! model patientHealthData
model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  dateOfBirth         DateTime
  gender              Gender
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(unmarried)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patientHealthData")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MaritalStatus {
  married
  unmarried
}

// ! model medicalReport 

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medicalReport")
}

// ! model schedule
model Schedule {
  id              String            @id @default(uuid())
  startTimeDate   DateTime
  endTimeDate     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]

  @@map("schedules")
}

// ! model DoctorSchedules
model DoctorSchedules {
  doctorId      String
  scheduleId    String
  isBooked      Boolean @default(false)
  appointmentId String?

  // todo: mark where the foreign key
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  doctor   Doctor   @relation(fields: [doctorId], references: [id])

  // todo: composite key
  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}
